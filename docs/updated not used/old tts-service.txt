/**
 * A service to handle Text-to-Speech (TTS) using the browser's Web Speech API.
 * This service is designed as a singleton to manage the speech queue and state.
 */
class TtsService {
    constructor() {
        this.synth = window.speechSynthesis;
        this.volume = 0.8; // Default volume
        this.voice = null;

        if (!this.synth) {
            console.error("Text-to-Speech is not supported in this browser.");
            return;
        }

        // The voices may not be loaded immediately.
        this.synth.onvoiceschanged = () => {
            this.loadVoice();
        };
        this.loadVoice();
    }

    loadVoice() {
        const voices = this.synth.getVoices();
        // Prefer a child-friendly, female voice if available.
        this.voice = voices.find(v => v.name.includes('Female') && v.lang.startsWith('en')) || voices.find(v => v.name.includes('child') && v.lang.startsWith('en')) || voices.find(v => v.lang.startsWith('en-US')) || voices[0];
    }

    /**
     * Sets the speech volume.
     * @param {number} volume A value between 0 and 1.
     */
    setVolume(volume) {
        this.volume = Math.max(0, Math.min(1, volume));
    }

    /**
     * Speaks the given text aloud.
     * If speech is already in progress, it will be cancelled before starting the new one.
     * @param {string} text The text to be spoken.
     * @param {Function} onEndCallback An optional callback function to execute when speech finishes.
     */
    speak(text, onEndCallback = () => {}) {
        if (!this.synth || !text) {
            // If TTS is not supported or there's no text, run the callback immediately.
            onEndCallback();
            return;
        }

        // Cancel any currently speaking utterance to prevent overlap.
        if (this.synth.speaking) {
            this.synth.cancel();
        }

        const utterance = new SpeechSynthesisUtterance(text);

        if (this.voice) {
            utterance.voice = this.voice;
        }
        utterance.volume = this.volume;
        // Configure voice properties for a more child-friendly tone.
        utterance.pitch = 1.2; // Slightly higher pitch
        utterance.rate = 0.9;  // Slightly slower rate

        utterance.onend = () => {
            onEndCallback();
        };

        utterance.onerror = (event) => {
            console.error("An error occurred during speech synthesis:", event.error);
            // Ensure callback runs even if there's an error.
            onEndCallback();
        };

        // A short delay can help ensure the cancel command has time to process on all browsers.
        setTimeout(() => this.synth.speak(utterance), 100);
    }
}

export default new TtsService(); The hell are you